<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core"
	xmlns:xe="http://www.ibm.com/xsp/coreex"
	xmlns:xc="http://www.ibm.com/xsp/custom" dojoParseOnLoad="true">
	
	<xp:this.resources>
		<xp:dojoModule name="dojox.widget.Standby"></xp:dojoModule>
	</xp:this.resources>

	<!--
		Copyright 2014 OpenNTF Domino API Team Licensed under the Apache License, Version 2.0
		(the "License"); you may not use this file except in compliance with the
		License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law
		or agreed to in writing, software distributed under the License is distributed
		on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
		express or implied. See the License for the specific language governing
		permissions and limitations under the License
	-->

	<xp:this.resources>
		<xp:styleSheet href="/styles.css"></xp:styleSheet>
	</xp:this.resources>

	<xe:applicationLayout id="applicationLayout1">
		<xp:this.facets>			
			<xp:callback facetName="LeftColumn" id="callback2"
				xp:key="LeftColumn">
			</xp:callback>
		</xp:this.facets>
		<xp:callback facetName="facet_1" id="callback1"></xp:callback>
		<xe:this.configuration>
			<xe:oneuiApplication legal="false"
				titleBarName="org.openntf.domino Demo Database - ${javascript:importPackage(org.openntf.dominoTests);Utils.getVersion();}"
				placeBar="false" footer="false">
			</xe:oneuiApplication>
		</xe:this.configuration>
	</xe:applicationLayout>
	<xp:scriptBlock id="scriptBlock1">
		<xp:this.value><![CDATA[
    //Standby Dialog V.3.2
    //Code Compile by Fredrik Norling www.xpagedeveloper.com
    //used with permission from the authors of the original code
    //http://dontpanic82.blogspot.com/2010/01/xpages-hijackingpublishing-partial.html
    //http://lotusnotus.com/lotusnotus_en.nsf/dx/xpages-tip-a-modal-waiting-dialog-for-background-processes..htm
 var init_hijackAndPublishPartialRefresh=false;
if(typeof hijackAndPublishPartialRefresh != 'function')
 {
 //Load only once check
 init_hijackAndPublishPartialRefresh=true;
    var obj_hijackAndPublishPartialRefresh=function (){
 // Hijack the partial refresh
 
 XSP._inheritedPartialRefresh = XSP._partialRefresh;
 XSP._partialRefresh = function( method, form, refreshId, options ){ 
     // Publish init
     dojo.publish( 'partialrefresh-init', [ method, form, refreshId, options ]);
     this._inheritedPartialRefresh( method, form, refreshId, options );
 }
   
 // Publish start, complete and error states
 dojo.subscribe( 'partialrefresh-init', function( method, form, refreshId, options ){
    
  if( options ){ // Store original event handlers
   var eventOnStart = options.onStart;
   var eventOnComplete = options.onComplete;
   var eventOnError = options.onError;
  }
  
  options = options || {}; 
  options.onStart = function(){
   dojo.publish( 'partialrefresh-start', [ method, form, refreshId, options ]);
   if( eventOnStart ){
    if( typeof eventOnStart === 'string' ){
     eval(eventOnStart)
    } else {
     eventOnStart();
    }
   }
  };
    
  options.onComplete = function(){
   dojo.publish( 'partialrefresh-complete', [ method, form, refreshId, options ]);
   if( eventOnComplete ){
    if( typeof eventOnComplete === 'string' ){
     eval( eventOnComplete );
    } else {
     eventOnComplete();
    }
   }
  };
    
  options.onError = function(){
   dojo.publish( 'partialrefresh-error', [ method, form, refreshId, options ]);
   if( eventOnError ){
    if( typeof eventOnError === 'string' ){
     eval( eventOnError );
    } else {
     eventOnError();
    }
   }
  };
 });
}
hijackAndPublishPartialRefresh=obj_hijackAndPublishPartialRefresh;
}
var StandbyDialog_Do;  
function StandbyDialog_Started() {
try{
      if(StandbyDialog_Do==true){
          if(this.StandbyDialog_Obj==null) {         
                var forms=dojo.body()          
                  this.StandbyDialog_Obj = new dojox.widget.Standby({
                          target: forms,
                          zIndex: 10000
                  });
                 document.body.appendChild(this.StandbyDialog_Obj.domNode);
                 this.StandbyDialog_Obj.startup();
          }
          StandbyDialog_StoreField()
          setTimeout("if(StandbyDialog_Do==true){StandbyDialog_StoreField()}",50);
          setTimeout("if(StandbyDialog_Do==true){this.StandbyDialog_Obj.show()}",200);
      }
      }catch(e){
      console.log("StandbyDialog_Started:"+e.toString())
      }
  }
  function StandbyDialog_StoreField(){
                if(document.activeElement){
          sessionStorage.setItem("StandbyDialog_Field",document.activeElement.id)
            this.StandbyDialog_Field=document.activeElement.id
                    }
            this.StandbyDialog_ScrollX=window.scrollX
            this.StandbyDialog_ScrollY=window.scrollY
         
         
  }
   
  function StandbyDialog_Completed() {
   try{
    StandbyDialog_Do=false
    if(this.StandbyDialog_Obj!=null) this.StandbyDialog_Obj.hide();
    if(this.StandbyDialog_Field===null){return true}
    var ActiveId="";
     if(document.activeElement){
       if(document.activeElement.id){
          ActiveId=document.activeElement.id;
        }}
    if(this.StandbyDialog_Field!=ActiveId){
      var prevElement = dojo.byId(this.StandbyDialog_Field);
      if( prevElement){
      if('INPUT|SELECT|TEXTAREA'.indexOf(prevElement.nodeName)!=-1){
          prevElement.focus();
          if( prevElement.nodeName !== 'SELECT' ){
              prevElement.select();
          }
      }}   
    }
  //  XSP.scrollWindow(this.StandbyDialog_ScrollX,this.StandbyDialog_ScrollY)
  }catch(e){
      console.log("StandbyDialog_Completed:"+e.toString())
      }
  }
  function FieldOnfocus(){
    console.log(refreshId)
  }
  function StandbyDialog_Enable(){
  try{
    //dojo-subscribe('onfocus',null,function(method,form,refreshId){FieldOnfocus()})
    dojo.subscribe( 'partialrefresh-start', null, function( method, form, refreshId ){
  
    StandbyDialog_Do=true
   StandbyDialog_Started()
    } );
    dojo.subscribe( 'partialrefresh-complete', null, function( method, form, refreshId ){
      StandbyDialog_Completed()
       
    } );
    dojo.subscribe( 'partialrefresh-error', null, function( method, form, refreshId ){
      StandbyDialog_Completed()
    } );
    }catch(e){
    console.log(e)
    }
  }
 
  if(init_hijackAndPublishPartialRefresh==true){
    hijackAndPublishPartialRefresh()
  }
dojo.addOnLoad(StandbyDialog_Enable)]]></xp:this.value>
	</xp:scriptBlock>
</xp:view>
