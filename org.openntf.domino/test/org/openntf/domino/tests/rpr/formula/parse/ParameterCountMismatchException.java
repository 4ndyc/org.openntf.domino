/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 5.0 */
/* JavaCCOptions:KEEP_LINE_COL=null */
package org.openntf.domino.tests.rpr.formula.parse;

/**
 * This exception is thrown when parse errors are encountered. You can explicitly create objects of this exception type by calling the
 * method generateParseException in the generated parser.
 * 
 * You can modify this class to customize your error reporting mechanisms so long as you retain the public fields.
 */
public class ParameterCountMismatchException extends RuntimeException {

	/**
	 * The version identifier for this Serializable class. Increment only if the <i>serialized</i> form of the class changes.
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * The following constructors are for use by you for whatever purpose you can think of. Constructing the exception in this manner makes
	 * the exception behave in the normal way - i.e., as documented in the class "Throwable". The fields "errorToken",
	 * "expectedTokenSequences", and "tokenImage" do not contain relevant information. The JavaCC generated code does not use these
	 * constructors.
	 */

	public ParameterCountMismatchException() {
		super();
	}

	/** Constructor with message. */
	public ParameterCountMismatchException(final String message) {
		super(message);
	}

	public ParameterCountMismatchException(final SimpleNode node, final String message) {
		super(initialise(node, message));
	}

	private static String initialise(final SimpleNode node, final String message) {
		String eol = System.getProperty("line.separator", "\n");
		StringBuffer expected = new StringBuffer();
		int maxSize = 0;
		//Token currentToken = parser.token;

		String retval = "Encountered \"";
		//Token tok = currentToken.next;
		Token tok = node.parser.token;
		for (int i = 0; i < maxSize; i++) {
			if (i != 0)
				retval += " ";
			if (tok.kind == 0) {
				retval += AtFormulaParserConstants.tokenImage[0];
				break;
			}
			retval += " " + AtFormulaParserConstants.tokenImage[tok.kind];
			retval += " \"";
			retval += add_escapes(tok.image);
			retval += " \"";
			tok = tok.next;
		}
		retval += "\" at line " + tok.next.beginLine + ", column " + tok.next.beginColumn;
		retval += "." + eol;
		retval += message;
		retval += expected.toString();
		return retval;
	}

	/**
	 * The end of line string for this machine.
	 */
	protected String eol = System.getProperty("line.separator", "\n");

	/**
	 * Used to convert raw characters to their escaped version when these raw version cannot be used as part of an ASCII string literal.
	 */
	static String add_escapes(final String str) {
		StringBuffer retval = new StringBuffer();
		char ch;
		for (int i = 0; i < str.length(); i++) {
			switch (str.charAt(i)) {
			case 0:
				continue;
			case '\b':
				retval.append("\\b");
				continue;
			case '\t':
				retval.append("\\t");
				continue;
			case '\n':
				retval.append("\\n");
				continue;
			case '\f':
				retval.append("\\f");
				continue;
			case '\r':
				retval.append("\\r");
				continue;
			case '\"':
				retval.append("\\\"");
				continue;
			case '\'':
				retval.append("\\\'");
				continue;
			case '\\':
				retval.append("\\\\");
				continue;
			default:
				if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
					String s = "0000" + Integer.toString(ch, 16);
					retval.append("\\u" + s.substring(s.length() - 4, s.length()));
				} else {
					retval.append(ch);
				}
				continue;
			}
		}
		return retval.toString();
	}

}
/* JavaCC - OriginalChecksum=92d919011d5deea88314a6cd23811097 (do not edit this line) */
