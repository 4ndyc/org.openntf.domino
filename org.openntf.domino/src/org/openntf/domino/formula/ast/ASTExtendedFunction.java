/* Generated By:JJTree: Do not edit this line. ASTExtendedFunction.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.openntf.domino.formula.ast;

import java.util.Set;

import org.openntf.domino.formula.AtFormulaParserImpl;
import org.openntf.domino.formula.FormulaContext;
import org.openntf.domino.formula.FormulaReturnException;
import org.openntf.domino.formula.ParseException;
import org.openntf.domino.formula.ValueHolder;
import org.openntf.domino.formula.impl.ExtendedFunction;

/**
 * @author Roland Praml, Foconis AG
 * 
 */
public class ASTExtendedFunction extends SimpleNode {
	String functionName;

	public ASTExtendedFunction(final AtFormulaParserImpl p, final int id) {
		super(p, id);
	}

	public void init(final String image) {
		functionName = image;
	}

	public void toFormula(final StringBuilder sb) {
		// does not generate any output
	}

	/* (non-Javadoc)
	 * @see org.openntf.domino.formula.ast.SimpleNode#jjtClose()
	 */
	@Override
	public void jjtClose() throws ParseException {
		System.out.println("Function name: " + functionName);
		ASTExtendedParameter[] parameter = new ASTExtendedParameter[children.length - 1];
		for (int i = 0; i < children.length - 1; i++) {
			parameter[i] = (ASTExtendedParameter) children[i];
		}
		Node function = children[children.length - 1];

		parser.declareFunction(new ExtendedFunction(functionName, parameter, function, parser));
		super.jjtClose();
	}

	@Override
	public ValueHolder evaluate(final FormulaContext ctx) throws FormulaReturnException {
		return ValueHolder.valueOf("");
	}

	@Override
	protected void analyzeThis(final Set<String> readFields, final Set<String> modifiedFields, final Set<String> variables,
			final Set<String> functions) {
		// TODO
	}

}
/* JavaCC - OriginalChecksum=0bef6e155cd93f4bed8a7902e8dc69c4 (do not edit this line) */
