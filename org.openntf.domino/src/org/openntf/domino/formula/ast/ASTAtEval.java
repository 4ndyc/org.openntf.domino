/* Generated By:JJTree: Do not edit this line. ASTAtEval.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.openntf.domino.formula.ast;

import java.util.Set;

import org.openntf.domino.formula.AtFormulaParser;
import org.openntf.domino.formula.AtFormulaParserImpl;
import org.openntf.domino.formula.EvaluateException;
import org.openntf.domino.formula.FormulaContext;
import org.openntf.domino.formula.FormulaReturnException;
import org.openntf.domino.formula.ParseException;
import org.openntf.domino.formula.ValueHolder;
import org.openntf.domino.formula.ValueHolder.DataType;

public class ASTAtEval extends SimpleNode {

	public ASTAtEval(final AtFormulaParserImpl p, final int id) {
		super(p, id);
	}

	public void toFormula(final StringBuilder sb) {
		sb.append("@Eval");
		appendParams(sb);
	}

	@Override
	public ValueHolder evaluate(final FormulaContext ctx) throws FormulaReturnException {
		ValueHolder vhEval = children[0].evaluate(ctx);
		if (vhEval.dataType == DataType.ERROR)
			return vhEval;
		ValueHolder ret = null;
		try {
			for (int i = 0; i < vhEval.size; i++) {
				String toEval = vhEval.getString(i);
				Node n = AtFormulaParser.getInstance().parse(toEval);
				ret = n.evaluate(ctx);
				if (ret.dataType == DataType.ERROR)
					break;
			}
			return ret;
		} catch (ParseException e) {
			return ValueHolder.valueOf(new EvaluateException(codeLine, codeColumn, e));
		}
	}

	@Override
	protected void analyzeThis(final Set<String> readFields, final Set<String> modifiedFields, final Set<String> variables,
			final Set<String> functions) {
		functions.add("@eval");
	}

}
/* JavaCC - OriginalChecksum=9f002c572c2d7c430f81c39c0b4cef35 (do not edit this line) */
