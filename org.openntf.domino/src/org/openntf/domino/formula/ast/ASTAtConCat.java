/* Generated By:JJTree: Do not edit this line. ASTAtConCat.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.openntf.domino.formula.ast;

import java.util.Set;

import org.openntf.domino.formula.AtFormulaParserImpl;
import org.openntf.domino.formula.EvaluateException;
import org.openntf.domino.formula.FormulaContext;
import org.openntf.domino.formula.FormulaReturnException;
import org.openntf.domino.formula.ValueHolder;
import org.openntf.domino.formula.ValueHolder.DataType;

public class ASTAtConCat extends SimpleNode {

	public ASTAtConCat(final AtFormulaParserImpl p, final int id) {
		super(p, id);
	}

	public void toFormula(final StringBuilder sb) {
		// TODO Auto-generated method stub

	}

	@Override
	public ValueHolder evaluate(final FormulaContext ctx) throws FormulaReturnException {
		if (children == null)
			return ValueHolder.valueDefault();

		ValueHolder vh;
		ValueHolder[] res = new ValueHolder[children.length];
		int size = 0;
		for (int i = 0; i < children.length; i++) {
			vh = children[i].evaluate(ctx);
			if (vh != null && vh.dataType == DataType.ERROR)
				return vh;
			res[i] = vh;
			size = Math.max(size, vh.size);
		}

		int entry = 0;
		vh = res[0].newInstance(size);
		try {
			switch (res[0].dataType) {
			case DOUBLE:
			case INTEGER:
				for (int i = 0; i < size; i++) {
					double sum = 0;
					for (entry = 0; entry < res.length; entry++) {
						sum += res[entry].getDouble(i);
					}
					vh.add(sum);
				}
				break;

			case STRING:
				for (int i = 0; i < size; i++) {

					StringBuffer sb = new StringBuffer();
					for (entry = 0; entry < res.length; entry++) {
						sb.append(res[entry].getString(i));
					}
					vh.add(sb.toString());
				}
				break;
			default:
				throw new UnsupportedOperationException("Concat on " + res[0].dataType + " is not supported");

			}
		} catch (RuntimeException cause) {
			if (entry < res.length) {
				SimpleNode child = (SimpleNode) children[entry];
				return ValueHolder.valueOf(new EvaluateException(child.codeLine, child.codeColumn, cause));
			}
			return ValueHolder.valueOf(new EvaluateException(codeLine, codeColumn, cause));
		}
		return vh;
	}

	@Override
	protected void analyzeThis(final Set<String> readFields, final Set<String> modifiedFields, final Set<String> variables,
			final Set<String> functions) {
		// TODO Auto-generated method stub

	}

}
/* JavaCC - OriginalChecksum=2b095cf813979405364ecca27c4a6b83 (do not edit this line) */
