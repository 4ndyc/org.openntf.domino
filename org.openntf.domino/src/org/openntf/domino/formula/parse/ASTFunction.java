/* Generated By:JJTree: Do not edit this line. ASTFunction.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/*
 * Â© Copyright FOCONIS AG, 2014
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); 
 * you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at:
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 * implied. See the License for the specific language governing 
 * permissions and limitations under the License.
 */
package org.openntf.domino.formula.parse;

import org.openntf.domino.tests.rpr.formula.eval.AtFunction;
import org.openntf.domino.tests.rpr.formula.eval.FormulaContext;
import org.openntf.domino.tests.rpr.formula.eval.ValueHolder;

public class ASTFunction extends SimpleNode {
	protected AtFunction function;

	public ASTFunction(final int id) {
		super(id);
	}

	public ASTFunction(final AtFormulaParser p, final int id) {
		super(p, id);
	}

	public void setFunction(final String string) {
		function = parser.getFunction(string);
		if (function == null) {
			throw new IllegalArgumentException("'" + string + "' is not a function");
		}
	}

	@Override
	public void jjtClose() {
		super.jjtClose();
		if (function != null) {

		}
	}

	/* (non-Javadoc)
	 * @see org.openntf.domino.tests.rpr.formula.SimpleNode#toString()
	 */
	@Override
	public String toString() {
		return super.toString() + ": " + function;
	}

	@Override
	public ValueHolder evaluate(final FormulaContext ctx) throws EvaluateException {
		try {
			if (jjtGetNumChildren() == 0) {
				return function.evaluate(ctx, null);
			}
			ValueHolder params[] = new ValueHolder[jjtGetNumChildren()];
			for (int i = 0; i < jjtGetNumChildren(); i++) {
				params[i] = jjtGetChild(i).evaluate(ctx);
			}
			return function.evaluate(ctx, params);
		} catch (Exception e) {
			// catch any exception that occurs while evaluating
			if (e instanceof EvaluateException) {
				throw (EvaluateException) e;
			} else {
				// if this was no EvaluateException, then wrap it and throw it
				throw this.createEvaluateException(e);
			}
		}
	}

	@Override
	public void toFormula(final StringBuilder sb) {
		sb.append(function.getImage());
		appendParams(sb);
	}
}
/* JavaCC - OriginalChecksum=ee60ee3554e18a77803b11d6b865e78e (do not edit this line) */
